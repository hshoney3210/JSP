//https://classroom.pepcoding.com/myClassroom/the-switch-program-4/recursion-&-backtracking/knights-tour-official/ojquestion
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int sr = scn.nextInt();
        int sc = scn.nextInt();
        int[][] chess = new int[n][n];
        printKnightsTour(chess, sr, sc, 1);
    }

    public static int[][] dir = {{-2, 1}, {-1, 2}, {1, 2}, {2, 1}, {2, -1}, {1, -2}, {-1, -2}, {-2, -1}};
    
    public static void printKnightsTour(int[][] chess, int sr, int sc, int currMove) {
        if(currMove == chess.length * chess.length){
            chess[sr][sc] = currMove;
            displayBoard(chess);
            chess[sr][sc] = 0;
            return;
        }
        
        chess[sr][sc] = currMove;
        for(int d = 0; d < dir.length; d++){
            int x = sr + dir[d][0];
            int y = sc + dir[d][1];
            
            if(x >= 0 && x < chess.length && y >= 0 && y < chess[0].length && chess[x][y] == 0){
                printKnightsTour(chess, x, y, currMove + 1);
            }
        }
        chess[sr][sc] = 0;
    }

    public static void displayBoard(int[][] chess){
        for(int i = 0; i < chess.length; i++){
            for(int j = 0; j < chess[0].length; j++){
                System.out.print(chess[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }
}
