//https://classroom.pepcoding.com/myClassroom/the-switch-program-4/recursion-&-backtracking/flood-fill-official/ojquestion
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int m = scn.nextInt();
        int[][] arr = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                arr[i][j] = scn.nextInt();
            }
        }
        floodfill(arr, 0, 0, "");
    }
    
    // asf -> answer so far
    public static char[] dirPath = {'t', 'l', 'd', 'r'};
    public static int[][] dir = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
    public static void floodfill(int[][] maze, int sr, int sc, String asf) {
        if(sr == maze.length - 1 && sc == maze[0].length - 1){
            System.out.println(asf);
            return;
        }
        
        maze[sr][sc] = 1; 
        for(int d = 0; d < dir.length; d++){
            int x = sr + dir[d][0];
            int y = sc + dir[d][1];
            
            if(x >= 0 && x < maze.length && y >= 0 && y < maze[0].length && maze[x][y] == 0){
                floodfill(maze, x, y, asf + dirPath[d]);
            }
        }
        maze[sr][sc] = 0; 
    }
}
