//https://classroom.pepcoding.com/myClassroom/the-switch-program-4/dynamic-programming/climb-stairs-official/ojquestion
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);
        //System.out.println(path_memo(n, dp));
        System.out.println(path_tab(n, dp));
    }
    
    public static int path_memo(int n, int[] dp){
        if(n == 0) return dp[n] = 1;
        
        if(dp[n] != -1) return dp[n];
        
        int first = 0, sec = 0, third = 0;
        if(n - 1 >= 0) first = path_memo(n - 1, dp);
        if(n - 2 >= 0) sec = path_memo(n - 2, dp);
        if(n - 3 >= 0) third = path_memo(n - 3, dp);
        return dp[n] = first + sec + third;
    }
    
    public static int path_tab(int N, int[] dp){
        for(int n = 0; n < dp.length; n++){
            if(n == 0) {
                dp[n] = 1;
                continue;
            }
            
            int first = 0, sec = 0, third = 0;
            if(n - 1 >= 0) first = dp[n - 1];
            if(n - 2 >= 0) sec = dp[n - 2];
            if(n - 3 >= 0) third = dp[n - 3];
            dp[n] = first + sec + third;
        }
        return dp[N];
    }
    

}
